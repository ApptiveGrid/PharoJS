"
I use PjTranspiler to export a PharoJs application to a file.
"
Class {
	#name : #PjFileExporter,
	#superclass : #PjExporter,
	#category : #'PharoJsExporter-Kernel'
}

{ #category : #exporting }
PjFileExporter class >> exportApp: aClass [
	^ (self exporterForApp: aClass) writeFiles
]

{ #category : #files }
PjFileExporter >> createFileNamed: fName startingWith: beginning and: string ifEditableDo: aBlock [
	| header match first100 |
	match := string , ' *** DO NOT EDIT ***'.
	header := [ :f | 
	self
		jsStream: f
		do: [ beginning
				ifNotNil: [ self
						nextPutAll: beginning;
						cr ].
			self
				nextPutAll: match;
				nextPutAll: ' on ';
				nextPutAll: DateAndTime now asString;
				cr.
			aBlock value: f ] ].
	[ ^ self fileStreamClass newFileNamed: fName do: header ]
		on: FileExistsException
		do: [ :exception | 
			self fileStreamClass
				readOnlyFileNamed: fName
				do: [ :file | 
					first100 := file next: 100 into: (String new: 100).
					(first100 = ''
						or: [ (first100 findString: match startingAt: 1 caseSensitive: true) > 0 ])
						ifTrue: [ ^ self fileStreamClass forceNewFileNamed: fName do: header ] ].
			Error
				signal:
					fName pathString , ' exists and does not contain "' , string
						, '" in the first 100 bytes' ]
]

{ #category : #files }
PjFileExporter >> fileName [
	^ self appClass appFullJsFileName
]

{ #category : #files }
PjFileExporter >> fileStreamClass [
	^ FileStream
]

{ #category : #files }
PjFileExporter >> writeFiles [
	self writeJavascriptFileNamed: self fileName.
]

{ #category : #files }
PjFileExporter >> writeJavascriptFileNamed: aFileName [
	self
		createFileNamed: aFileName
		startingWith: self headerLine
		and: '// generated by PharoJS'
		ifEditableDo: [ :fileStream | self writeJsCodeOn: fileStream]
]
