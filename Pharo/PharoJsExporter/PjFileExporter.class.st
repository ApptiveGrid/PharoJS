"
I use PjTranspiler to export a PharoJs application to a file.
"
Class {
	#name : #PjFileExporter,
	#superclass : #PjExporter,
	#category : #'PharoJsExporter-Kernel'
}

{ #category : #exporting }
PjFileExporter class >> exportApp: aClass [
	^ (self newWithAppClass: aClass) writeFiles
]

{ #category : #files }
PjFileExporter >> createFileNamed: someFileName startingWith: beginning and: string ifEditableDo: aBlock [
	| fileReference |
	fileReference := self fileReferenceFrom: someFileName.
	fileReference exists ifTrue: [ 
		self delete: fileReference ifMatches: string ].
	self
		writeInto: fileReference
		match: string
		startingWith: beginning
		do: aBlock
]

{ #category : #files }
PjFileExporter >> delete: fileReference ifMatches: string [
	| fileStream first100 match |
	fileReference exists ifFalse: [ ^self ].
	fileStream := fileReference openForRead.
	first100 := fileStream next: 100 into: (String new: 100).
	fileStream close.
	match := self matchFrom: string.
	(first100 = ''
						or: [ (first100 findString: match startingAt: 1 caseSensitive: true) > 0 ])
						ifTrue: [ ^ self].
		Error
				signal:
					fileReference pathString , ' exists and does not contain "' , string
						, '" in the first 100 bytes'
]

{ #category : #files }
PjFileExporter >> fileName [
	^ self appClass appFullJsFileName
]

{ #category : #files }
PjFileExporter >> fileReferenceFrom: someFileName [

	^ someFileName asFileReference
]

{ #category : #files }
PjFileExporter >> matchFrom: string [

	^ string , ' *** DO NOT EDIT ***'
]

{ #category : #files }
PjFileExporter >> writeFiles [
	self writeJavascriptFileNamed: self fileName.
]

{ #category : #files }
PjFileExporter >> writeInto: fileReference match: string startingWith: beginning  do: aBlock [
	| fileStream |
	fileStream := fileReference writeStream.
	self
		jsStream: fileStream
		do: [ beginning
				ifNotNil: [ self
						nextPutAll: beginning;
						cr ].
			self
				nextPutAll: (self matchFrom: string);
				nextPutAll: ' on ';
				nextPutAll: DateAndTime now asString.
			OSPlatform current environment at: 'LOGNAME' ifPresent: [: name |
				self nextPutAll: ' by ';nextPutAll: name
			] ifAbsent: [
				OSPlatform current environment at: 'USER' ifPresent: [: name |
					self nextPutAll: ' by ';nextPutAll: name
				] ifAbsent: [
					OSPlatform current environment at: 'USERNAME' ifPresent: [: name |
						self nextPutAll: ' by ';nextPutAll: name]]].
			self cr.
			self nextPutAll: '''use strict'';';cr.
			aBlock value: fileStream ].
	fileStream close
]

{ #category : #files }
PjFileExporter >> writeInto: f startingWith: beginning  do: aBlock [
	| match |
	self
		jsStream: f
		do: [ beginning
				ifNotNil: [ self
						nextPutAll: beginning;
						cr ].
			self
				nextPutAll: match;
				nextPutAll: ' on ';
				nextPutAll: DateAndTime now asString.
			OSPlatform current environment at: 'LOGNAME' ifPresent: [: name |
				self nextPutAll: ' by ';nextPutAll: name
			] ifAbsent: [
				OSPlatform current environment at: 'USER' ifPresent: [: name |
					self nextPutAll: ' by ';nextPutAll: name
				] ifAbsent: [
					OSPlatform current environment at: 'USERNAME' ifPresent: [: name |
						self nextPutAll: ' by ';nextPutAll: name]]].
			self cr.
			self nextPutAll: '''use strict'';';cr.
			aBlock value: f ]
]

{ #category : #files }
PjFileExporter >> writeJavascriptFileNamed: aFileName [
	"Delete file first, because Windows can't open it for writing later when the file is open."
	aFileName ifNotNil: [aFileName resolve deleteIfAbsent: [ ]].
	self
		createFileNamed: aFileName
		startingWith: self headerLine
		and: '// generated by PharoJS'
		ifEditableDo: [ :fileStream | self writeJsCodeOn: fileStream]
]
