// generated by PharoJS *** DO NOT EDIT *** on 2018-09-27T16:36:41.341704+02:00 by noury
var global=global||this
global.Smalltalk=global.Smalltalk||(function Smalltalk(){});
Object.defineProperty(Object.prototype,"$def",{value:
 function $def(aFunc){
	Object.defineProperty(this,aFunc.name,{writable:true,value:aFunc})}})
var require
global.Smalltalk.require=require
function PjClass(){};
Smalltalk.theClassClass=PjClass;
Smalltalk.$def(function _at_(jsName){return global[jsName]});
Smalltalk.$def(function _at_ifAbsent_(key,aBlock){return $asNil$(global)._at_ifAbsent_(key,aBlock)});
Smalltalk.$def(function _at_ifAbsentPut_(aKey,aBlock){return $asNil$(global)._at_ifAbsentPut_(aKey,aBlock)});
Smalltalk.$def(function _at_ifPresent_(key,aBlock){return $asNil$(global)._at_ifPresent_(key,aBlock)});
Smalltalk.$def(function _at_put_(jsName,anObject){return global[jsName]=anObject});
Smalltalk.$def(function _emptyJavascriptObject(){return {}});
Smalltalk.$def(function _handleDNU_for_(aMessage,anObject){var selector,type,$_self_$=this;selector=(($asNil$(aMessage)._selector()).split(":"))[0];type=selector.split("_");return this._installDnuArgs_selector_js_for_else_($asNil$(aMessage)._arguments(),selector,this._makeJavascriptSelector_($asNil$(aMessage)._selector()),anObject,function(){return $_self_$._error_("Message not understood: "+$asNil$(anObject)._className()+">>#"+$asNil$(aMessage)._selector())})});
Smalltalk.$def(function _initNilInJs(){global[(this._nilTestFunctionName())]=this._nilIfUndefined();return this});
Smalltalk.$def(function _initObject(){Object.__proto__._subclass_=this._makeSubclass();this.theClassClass.prototype.__proto__=Function.prototype;return this});
Smalltalk.$def(function _initThrowInJs(){global[(this._throwFunctionName())]=this._throwFunction();return this});
Smalltalk.$def(function _initializeCore(){this.selectorCache=this._emptyJavascriptObject();this._initNilInJs();this._initThrowInJs();this._initObject();this._messageClass_(this);this._metaclassClass_(this);return this});
Smalltalk.$def(function _installDnuArgs_selector_js_for_else_(args,selector,jsSelector,anObject,aBlock){var type,func,functionName;if((type=anObject[selector])!=undefined)if(true==this._isFunction_(type)){functionName=type.name;if(""==functionName)type=2;else if(true==$asNil$($asNil$(functionName)._asCharacter())._61_($asNil$($asNil$(functionName)._asCharacter())._capitalized()))type=0;else type=2}else type=args.length;if(2>type){if(0==type)func=this._makeGetter_(selector);else func=this._makeSetter_(selector);Object.defineProperty(anObject.__proto__,jsSelector,this._propertySet_(func));return func.apply(anObject,args)}else {type=anObject;while(true==$asNil$(type)._notNil()){if(true==(true==type.hasOwnProperty(selector)&&"function"==$asNil$(type[selector])._typeof())){func=type[selector];Object.defineProperty(type,jsSelector,this._propertySet_(func));return func.apply(anObject,args)}type=$asNil$(type)._instVarNamed_("__proto__")}}return $asNil$(aBlock)._value()});
Smalltalk.$def(function _isBrowserPlatform(){return $asNil$(this._at_("navigator"))._isNotNil()});
Smalltalk.$def(function _isDomPlatform(){return $asNil$(this._at_("document"))._isNotNil()});
Smalltalk.$def(function _isFunction_(type){return "function" == typeof type});
Smalltalk.$def(function _isNodePlatform(){return $asNil$(this._at_("navigator"))._isNil()});
Smalltalk.$def(function _keys_(anObject){var result={};
for (var i in anObject) { if(typeof anObject[i]!="function" && anObject[i]!=null && anObject[i]._proxyResponse) result[i]=anObject[i]._proxyResponse()}
return {_proxyResponse:function(){return {keys:result}}}});
Smalltalk.$def(function _log_(message){console.log(message);return this});
Smalltalk.$def(function _makeDNU_(aSelector){var pjCore=this,ss=this._makeSmalltalkSelector_(aSelector);
switch (ss.split(":").length) {
case 1: return function __DNU(){
return this._doesNotUnderstand_(pjCore._selector_arguments_(ss,[]))};
case 2: return function __DNU(arg1) {
return this._doesNotUnderstand_(pjCore._selector_arguments_(ss,[arg1]))};
case 3: return function __DNU(arg1,arg2) {
return this._doesNotUnderstand_(pjCore._selector_arguments_(ss,[arg1,arg2]))};
default: return function __DNU() {
var args=new Array(arguments.length);
for(var i=0;i<arguments.length;++i) args[i]=arguments[i]
return this._doesNotUnderstand_(pjCore._selector_arguments_(ss,args))};
}});
Smalltalk.$def(function _makeGetter_(selector){return function Getter(){return this[selector]}});
Smalltalk.$def(function _makeJavascriptSelector_(aSelector){var result;if(aSelector[0]=="_")return aSelector;if(true==this.selectorCache.hasOwnProperty(aSelector))return this.selectorCache[aSelector];if((sel=aSelector)!=undefined){if(true==(true==$asNil$(sel)._isLetter()||aSelector[0]=="$"))result=(":"+sel).split(":");else {result=[undefined];(1)._to_do_($asNil$(sel)._size(),function(idx){return result.push((sel.charCodeAt(idx-1)).toString())});result.push(undefined)}result=result.join("_")}if(this.selectorCache[result]==undefined)this.selectorCache[result]=aSelector;if(this.selectorCache[aSelector]==undefined)this.selectorCache[aSelector]=result;return result});
Smalltalk.$def(function _makeSetter_(selector){return function Setter(value){return this[selector]=value}});
Smalltalk.$def(function _makeSmalltalkSelector_(aSelector){var result;if(aSelector[0]!="_")return aSelector;if(true==this.selectorCache.hasOwnProperty(aSelector))return this.selectorCache[aSelector];result=aSelector.split("_");result.shift();if(result[0][0]>"9")return result.join(":");result.pop();(0)._to_do_(result.length-1,function(index){return result[index]=String._value_(result[index])});result=result.join("");if(this.selectorCache[result]==undefined)this.selectorCache[result]=aSelector;if(this.selectorCache[aSelector]==undefined)this.selectorCache[aSelector]=result;return result});
Smalltalk.$def(function _makeSubclass(){var pjCore=this;
return function(subclassName){
var subclass = (function(){
if(this[subclassName]) 
return this[subclassName];
var newClass = (new Function("return function "+subclassName+"(){}"))();
newClass.name = subclassName;
return this[subclassName] = newClass;
})();
if(subclass.__proto__.__proto__ == this.__proto__){return;}
subclass.subclasses = [];
if(subclass == this) {
this.__proto__ = {__proto__ : pjCore.theClassClass.prototype};
}else{
subclass.__proto__ = {__proto__ : this.__proto__};
subclass.prototype.__proto__ = this.prototype;
this.subclasses.push(subclass);
}
}});
Smalltalk.$def(function _messageClass_(anObject){this.messageClass=anObject;return this});
Smalltalk.$def(function _metaclassClass_(anObject){this.metaclassClass=anObject;return this});
Smalltalk.$def(function _metaclassOf_(aClass){if(this.metaclassClass!==this) return this.metaclassClass._metaclassOf_(aClass);
var theMetaClass={ prototype: aClass.__proto__,__proto__:this.theClassClass.prototype,
_name: function(){return aClass._name()+" class"},
_theNonMetaClass: function(){return aClass},
_theMetaClass: function(){return theMetaClass},
};
return theMetaClass});
Smalltalk.$def(function _nilIfUndefined(){var pjCore=this;return function(arg){if(arg == undefined){
return pjCore.nilInJs;
}
return arg}});
Smalltalk.$def(function _nilInJs_(anObject){this.nilInJs=anObject;return this});
Smalltalk.$def(function _nilTestFunctionName(){return "$asNil$"});
Smalltalk.$def(function _propertySet_(func){return {
enumerable: false,
configurable: false,
writable: true,
value: func}});
Smalltalk.$def(function _registerDnu_(aSelector){var selector,props;selector=this._makeJavascriptSelector_(aSelector);if(Object.prototype[selector]==undefined){props=this._makeDNU_(aSelector);Object.defineProperty(Object.prototype,selector,this._propertySet_(props))}return selector});
Smalltalk.$def(function _registerDnuForAll_(anArray){var $_self_$=this;anArray.forEach(function(each){return $_self_$._registerDnu_(each)});return this});
Smalltalk.$def(function _selector_arguments_(selector,args){if(this.messageClass!==this)
return this.messageClass._selector_arguments_(selector,arguments);
return {
selector: selector,
_selector: function(){return this.selector},
arguments: args,
_arguments: function(){return this.arguments}
}});
Smalltalk.$def(function _throwFunction(){return function(arg){throw arg}});
Smalltalk.$def(function _throwFunctionName(){return "$throw$"});
Smalltalk._initializeCore();
